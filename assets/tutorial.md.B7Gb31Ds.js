import{_ as a,c as s,ae as i,o as t}from"./chunks/framework.BzDBnRMZ.js";const g=JSON.parse('{"title":"nvim-orgmode Tutorial","description":"","frontmatter":{"author":"nvim-orgmode Team","title":"nvim-orgmode Tutorial"},"headers":[],"relativePath":"tutorial.md","filePath":"tutorial.md"}'),n={name:"tutorial.md"};function o(l,e,r,h,p,d){return t(),s("div",null,e[0]||(e[0]=[i(`<h1 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">â€‹</a></h1><p>Org-mode is a flexible note-taking system that was originally created for Emacs. It has gained wide-spread acclaim (this file itself is an Org-mode file, which is supported by GitHub wikis) and was eventually ported to Neovim.</p><ol><li><a href="#file-syntax">File Syntax</a></li><li><a href="#basic-customization">Basic Customization</a></li><li><a href="#agenda">Agenda</a></li><li><a href="#captures">Captures</a></li><li><a href="#archiving">Archiving</a></li><li><a href="#exporting">Exporting</a></li><li><a href="#further-resources">Further Resources</a></li></ol><p>To get the hang of it, we will create an org file in which we will keep all the repositories we want to check out in the future. First, let&#39;s create an empty file called <code>repos.org</code>.</p><h1 id="file-syntax" tabindex="-1">File Syntax <a class="header-anchor" href="#file-syntax" aria-label="Permalink to &quot;File Syntax&quot;">â€‹</a></h1><p>Org files often start with meta-information for the title and the author:</p><pre><code>#+title: Repositories
#+author: &lt;Your Name&gt;
</code></pre><p>These directives are not necessary but may give others (including you in the future!) a gist what this file is about. There are many more directives detailed at [TODO: add this to the docs]</p><p>To create a list of repositories, we start a new line with a dash, followed by the repo name we&#39;d like to remember:</p><pre><code>- Org Bullets
</code></pre><p>Congratulations, you created your first list! ðŸŽ‰ From here, you can easily add new list items by pressing <code>&lt;Leader&gt;&lt;Enter&gt;</code>, the so-called org <code>meta return</code>. It has different effects, depending on the current position of the cursor. If it&#39;s on a list item, it will add another one. We will discuss other uses later on. [TODO: actually do that]</p><pre><code>- Org Bullets
- vim-table-mode
</code></pre><p>Our list is already functional, but it&#39;s only scratching the surface of what Org-mode can do. Let&#39;s look at how org files are structured using <code>headings</code>.</p><h2 id="headings" tabindex="-1">Headings <a class="header-anchor" href="#headings" aria-label="Permalink to &quot;Headings&quot;">â€‹</a></h2><p>Any line starting with one or more asterisks (*) but without any preceding whitespace is a heading (also called headline). Let&#39;s change our list items to 1st-level headings by replacing the dashes with asterisks:</p><pre><code>* Org Bullets
* Vim table-mode
</code></pre><p>The number of asterisks denotes the level of the heading: the more asterisks, the deeper the level. That is how we achieve nested structures in our org files.</p><pre><code>* Org Bullets
** Synopsis
* Vim table-mode
</code></pre><p>The content within a heading can be free form text, include links, be a list, or any combination thereof. Let&#39;s add a short description:</p><pre><code>* Org Bullets
** Synopsis
   This plugin is a clone of org-bullets. It replaces the asterisks in org
   syntax with unicode characters.
* Vim table-mode
</code></pre><p>The full syntax for a headline is</p><pre><code>STARS KEYWORD PRIORITY TITLE TAGS
*     TODO    [#A]     foo   :bar:baz:
</code></pre><ul><li><code>KEYWORD</code>, if present, turns the heading into a TODO item. By default this can be <code>TODO</code> or <code>DONE</code> (see the <a href="#basic-customization">Customization</a> section to change this).</li><li><code>PRIORITY</code> sets a priority level to be used in the <a href="#agenda">Agenda</a>.</li><li><code>TITLE</code> is the main body of the heading.</li><li><code>TAGS</code> is a colon surrounded and delimited list of tags used in searching in the <a href="#agenda">Agenda</a>.</li></ul><p>Headings (usually with a <code>KEYWORD</code>) can also have deadlines, and/or be scheduled with timestamps (e.g. &lt;2022-12-31&gt;) [TODO: explain the difference between deadlines and scheduled headings]. Thus we could enhance our list of repos like so:</p><div class="language-org vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">org</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>* org-bullets.nvim                                                      :org:</span></span>
<span class="line"><span>** Synopsis</span></span>
<span class="line"><span>   This plugin is a clone of org-bullets. It replaces the asterisks in org</span></span>
<span class="line"><span>   syntax with unicode characters.</span></span>
<span class="line"><span>* vim-table-mode                                                        :org:</span></span>
<span class="line"><span>** TODO Synopsis</span></span>
<span class="line"><span>   SCHEDULED: &lt;YYYY-MM-DD&gt;</span></span>
<span class="line"><span>* plenary                                                               :lua:</span></span>
<span class="line"><span>** TODO [#A] Synopsis</span></span>
<span class="line"><span>   DEADLINE: &lt;YYYY-MM-DD&gt;</span></span></code></pre></div><h2 id="links" tabindex="-1">Links <a class="header-anchor" href="#links" aria-label="Permalink to &quot;Links&quot;">â€‹</a></h2><p>One final aspect of the org file syntax are links. Links are of the form <code>[[link][description]]</code>, where link can be a</p><ul><li>URL (<code>http://</code>, <code>https://</code>)</li><li>path to a file (<code>file:/path/to/org/file</code>)</li><li>target (any text surrounded by &lt;&lt; and &gt;&gt;). If the target is in a different file the format is â€˜file:~/path/to/org/file.org::My Targetâ€™</li><li>headline within the same file</li><li>headline with a custom id (<code>#your-custom-id</code>)</li></ul><p>In order to easily go to the repositories we found online, let&#39;s link to their actual website:</p><div class="language-org vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">org</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>* [[https://github.com/akinsho/org-bullets.nvim][org-bullets.nvim]]     :org:</span></span>
<span class="line"><span>** Synopsis</span></span>
<span class="line"><span>   This plugin is a clone of org-bullets. It replaces the asterisks in org</span></span>
<span class="line"><span>   syntax with unicode characters.</span></span>
<span class="line"><span>* [[https://github.com/dhruvasagar/vim-table-mode][vim-table-mode]]     :org:</span></span>
<span class="line"><span>** TODO Synopsis</span></span>
<span class="line"><span>   SCHEDULED: &lt;YYYY-MM-DD&gt;</span></span>
<span class="line"><span>* [[https://github.com/nvim-lua/plenary.nvim][plenary]]                 :lua:</span></span>
<span class="line"><span>** TODO [#A] Synopsis</span></span>
<span class="line"><span>   DEADLINE: &lt;YYYY-MM-DD&gt;</span></span></code></pre></div><h1 id="basic-customization" tabindex="-1">Basic Customization <a class="header-anchor" href="#basic-customization" aria-label="Permalink to &quot;Basic Customization&quot;">â€‹</a></h1><p>A first customization of orgmode would look like:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- init.lua</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;orgmode&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setup_ts_grammar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  org_agenda_files </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;~/path/to/agenda/file/*.org&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  org_default_notes_file </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;~/path/to/default/capture/file.org&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>with all customization options going in the <code>org.setup({})</code>.</p><p>All available options are detailed <a href="./configuration.html">here</a>, including setting new keybindings.</p><h1 id="agenda" tabindex="-1">Agenda <a class="header-anchor" href="#agenda" aria-label="Permalink to &quot;Agenda&quot;">â€‹</a></h1><p>The org agenda is used to get an overview of all your different org files. Pressing <code>&lt;Leader&gt;oa</code> gives you an overview of the various specialized views into the agenda that are available. From each view you can press <code>g?</code> to see all the available key mappings. The most important ones are:</p><ul><li>t =&gt; change the TODO state of a heading</li><li>&lt;Enter&gt; =&gt; open heading in current (agenda-)window</li><li>&lt;TAB&gt; =&gt; open heading in another window</li></ul><h1 id="captures" tabindex="-1">Captures <a class="header-anchor" href="#captures" aria-label="Permalink to &quot;Captures&quot;">â€‹</a></h1><p>To quickly save thoughts, ideas or other things that come up regularly in your day without interrupting your current task, Org-mode offers you so-called captures. They can conveniently opened in any Vim buffer with <code>&lt;Leader&gt;oc</code>. Here we are presented with a list of availabe capture templates.</p><p>To aid us in our endeavour of saving interesting repos, let&#39;s create a custom capture that saves us from manually adding them to the <code>repos.org</code> file. We add the following in our call to <code>org.setup()</code>:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org_capture_templates </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      description </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Repo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      template </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;* [[%x][%(return string.match(&#39;%x&#39;, &#39;([^/]+)$&#39;))]]%?&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;~/org/repos.org&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>After restarting Vim you should be able to select the <code>Repo</code> capture-template with <code>r</code> when you initiate a capture. If you have the link to the repo in you clipboard, it will be inserted into the link correctly. See the docs about the possible ways to <a href="./configuration.html#org_capture_templates">configure your templates</a>.</p><h1 id="archiving" tabindex="-1">Archiving <a class="header-anchor" href="#archiving" aria-label="Permalink to &quot;Archiving&quot;">â€‹</a></h1><p>When we no longer need certain parts of our org files, they can be archived. Let&#39;s say we are done with checking out the org-bullets repo, so we archive it by pressing <code>&lt;Leader&gt;o$</code> while on the heading. This will also archive any child headings. The default location for archived headings is &lt;name-of-current-org-file&gt;.org<sub>archive</sub>, which can be changed with the <a href="./configuration.html#org_archive_location">org<sub>archivelocation</sub></a> option.</p><h1 id="exporting" tabindex="-1">Exporting <a class="header-anchor" href="#exporting" aria-label="Permalink to &quot;Exporting&quot;">â€‹</a></h1><p>In case you want to preview, you can export your .org file to e.g., html with pandoc, see the <a href="./configuration.html#org_export">docs</a>.</p><h1 id="further-resources" tabindex="-1">Further Resources <a class="header-anchor" href="#further-resources" aria-label="Permalink to &quot;Further Resources&quot;">â€‹</a></h1><p>Org-mode is has many more features than the tiny subset outlined here. Have a look around the official <a href="https://orgmode.org/manual/" target="_blank" rel="noreferrer">manual</a> if you are interested in any particular topic. But please keep in mind, that this is a work-in-progress port for Neovim and not the original source for Emacs Org-mode. If you find any features you would like to see here, feel free to open an issue or (even better) <a href="https://github.com/nvim-orgmode/orgmode#development" target="_blank" rel="noreferrer">get your hands dirty</a> and create a pull request ðŸ˜‰</p>`,49)]))}const u=a(n,[["render",o]]);export{g as __pageData,u as default};
